%YAML 1.2
---
# MIT License

# Copyright (c) 2017 Gwénolé LE HENAFF

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# http://www.sublimetext.com/docs/3/syntax.html

name: PseudoCodeFR - IMIE - TACT factory
file_extensions:
  - algo
scope: source.algo
contexts:
  main:
    - include: comments
    - include: keywords
    - include: logical-expression
    - include: loop
    - include: math
    - include: constants
    - include: builtinTypes
    - include: builtinFunctions
    - include: function-definition
  comments:
    - match: //
      scope: punctuation.definition.comment.source.algo    
      push:
        - meta_scope: comment.line.double-slash.source.algo
        - match: $\n?
          pop: true
  keywords:
    - match: \b(SI|ALORS$|SINON|FINSI$|SELON\s|FINSELON$|DEBUT$|FIN$|VARIABLE$|CONSTANTE$|^ALGORITHME\s|FINFONCTION$)\b
      scope: keyword.control.source.algo
    - match: \b(nouveau)\b
      scope: keyword.operator.source.algo
    - match: (<-)
      scope: keyword.operator.assignment.java
  logical-expression:
    - match: '\sET\s|\sOU\s|\sOUX\s|NON'
      scope: keyword.operator.logical.algo
  loop:
    - match: \b(POUR\s|\sDE\s|\sA\s|\sPAS\sDE\s|FAIRE$|FINPOUR$|TANTQUE|FINTANTQUE$)\b
      scope: keyword.control.source.algo
  math:
    - match: '\+|-|\*|/|%|<[=]?|>[=]?|=|!=|^|\&|DIV|<>'
      scope: keyword.operator.arithmetic.algo
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b'
      scope: constant.numeric.integer.algo
  constants:
    - match: \b(vrai|faux|null)\b
      scope: constant.language.java
    - match: \b(this)\b
      scope: variable.language.java
    - match: '"'
      scope: punctuation.definition.string.begin.source.algo
      push:
        - meta_scope: string.quoted.double.source.algo
        - match: '"'
          scope: punctuation.definition.string.end.source.algo
          pop: true
        - match: \\.
          scope: constant.character.escape.source.algo
    - match: "'"
      scope: punctuation.definition.string.begin.source.algo
      push:
        - meta_scope: string.quoted.single.source.algo
        - match: "'"
          scope: punctuation.definition.string.end.source.algo
          pop: true
        - match: \\.
          scope: constant.character.escape.source.algo
  builtinTypes:
    - match: \b(ENTIER|REEL|BOOLEEN|CHAINE|CARACTERE|TABLEAU)\b
      scope: storage.type.source.algo
  builtinFunctions:
    - match: \b(Len|Mid|Mod|Trouve|Lire|Ecrire|Redim|Left|Right|Rand|Retourne)\b
      scope: entity.name.function.algo
  function-definition:
    - match: '\b(FONCTION)\s+'
      captures:
        1: keyword.control.source.algo
    - match: '\b([^\s\(]+)(?=\([^\)]*\))'
      captures:
        1: entity.name.function.algo


